import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
	public static void main(String[] args) throws IOException{

		// we expect exactly one argument: the name of the input file
		if (args.length!=1) {
			System.err.println("\n");
			System.err.println("Please give as input argument a filename\n");
			System.exit(-1);
		}
		String filename=args[0];

		// open the input file
		CharStream input = CharStreams.fromFileName(filename);
		//new ANTLRFileStream (filename); // depricated

		// create a lexer/scanner
		ccLexer lex = new ccLexer(input);

		// get the stream of tokens from the scanner
		CommonTokenStream tokens = new CommonTokenStream(lex);

		// create a parser
		ccParser parser = new ccParser(tokens);

		// and parse anything from the grammar for "start"
		ParseTree parseTree = parser.start();

		// Construct an interpreter and run it on the parse tree
		Interpreter interpreter = new Interpreter();
		Double result=interpreter.visit(parseTree);
		System.out.println("The result is: "+result);
	}
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double>
		implements ccVisitor<Double> {
	// todo - Java will complain that "Interpreter" does not in fact
	// implement "implVisitor" at the moment.


	public Double visitStart(ccParser.StartContext ctx){
		return visit(ctx.e);
	}
	public Double visitVariable(ccParser.VariableContext ctx){
		System.err.println("Variables are not yet supported.\n");
		System.exit(-1);
		return null; }
	public Double visitAddSub(ccParser.AddSubContext ctx){
		// e1=exp op=('+'|'-') e2=exp
		System.out.println("Addition/Subtraction");
		Double d1=visit(ctx.e1);
		Double d2=visit(ctx.e2);
		if (ctx.op.getText().equals("+")){
			System.out.println("Add "+d1+" + "+d2+" = "+(d1+d2));
			return d1+d2;
		}
		else{
			System.out.println("Sub "+d1+" - "+d2+" = "+(d1-d2));
			return d1-d2;
		}
	}
	public Double visitConstant(ccParser.ConstantContext ctx){
		String s=ctx.f.getText();
		System.out.println("Constant "+s);
		return Double.valueOf(s);
	}
	public Double visitParen(ccParser.ParenContext ctx){ return visit(ctx.e); }
	public Double visitMultDiv(ccParser.MultDivContext ctx){
		System.out.println("Mult/Div");
		Double d1=visit(ctx.e1);
		Double d2=visit(ctx.e2);
		if (ctx.op.getText().equals("*")){
			System.out.println("Mult "+d1+" * "+d2+" = "+(d1*d2));
			return d1*d2;
		}
		else{
			System.out.println("Div "+d1+" / "+d2+" = "+(d1/d2));
			return d1/d2;
		}

	}


}
